// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../templates/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// creating models for the car
// the models are to be inputted one by one and then linked
// 1/ The models are being created (Somewhat done)
// 2/ the models will be linked with each other (What i am currently doing)
// 3/ test the relationship between these tables

// Chb3a erreurat

enum RegTypes {
  TUN
  RS
  TRAC
  PAT
  CMD
  CD
  MD
  MC
  CC
  REM
  AA
  ES
  PE
  IT
}

enum RepairStatus {
  DIAGNOSTIC
  REPAIR
  SUCCESS
  FAILURE
}

model Vehicule {
  vin         String  @id
  local       Boolean //for local in-house vehicules and the not local (imported) vehicules 
  registation String // to maybe set automatically when the registration type is selected

  // define in-house vehicules (nullable)
  registration_type RegTypes? // null if local is false

  // define imported vehicules (nullable also) 
  location    String?
  Reservation Reservation[]
}

model Mechanic {
  mechanic_id             Int           @id
  pay_per_hour            Float
  HeadMechanic            HeadMechanic?
  Diagnostic              Diagnostic?   @relation(fields: [diagnosticDiagnostic_id], references: [diagnostic_id])
  diagnosticDiagnostic_id Int?
  Repair                  Repair?       @relation(fields: [repairRepair_id], references: [repair_id])
  repairRepair_id         Int?
}

model HeadMechanic {
  mechanic_id Int          @unique
  mechanic    Mechanic     @relation(fields: [mechanic_id], references: [mechanic_id])
  Diagnostic  Diagnostic[]
  Repair      Repair[]
}

// currently the phone number supports only the phones in tunisian format only (may support global phone numbers later)

model Reservation {
  reservation_id Int           @id @default(autoincrement())
  mobile_phone   String        @db.VarChar(8)
  date           DateTime
  base_fee       Float? // if there is a fee or not
  repair_status  RepairStatus? // to both get information about the repair and it's type
  vehicule_id    String
  vehicule       Vehicule      @relation(fields: [vehicule_id], references: [vin])

  // to test later
  // need to make this work for later @@db.check("mobile_phone ~ '^(2|5|9)[0-9]{7}$'") 
  Diagnostic Diagnostic[]
  Repair     Repair[]
}

model Diagnostic {
  diagnostic_id    Int          @id @default(autoincrement())
  responsible_id   Int
  responsible      HeadMechanic @relation(fields: [responsible_id], references: [mechanic_id])
  workers_employed Mechanic[]

  reservation_id Int
  reservation    Reservation @relation(fields: [reservation_id], references: [reservation_id]) // are names supposed to be the same?
}

model Repair {
  repair_id        Int          @id @default(autoincrement())
  responsible_id   Int
  responsible      HeadMechanic @relation(fields: [responsible_id], references: [mechanic_id])
  workers_employed Mechanic[]

  reservation_id     Int
  reservation        Reservation @relation(fields: [reservation_id], references: [reservation_id])
  total_repair_hours Int
}

model RepairPart {
  part_id   String @id
  price     Float
  repair_id Int[]
  vendor_id Int[]
}

// the price is maybe problematic

model Vendor {
  vendor_id           Int    @id
  vendor_shop_name    String
  vendor_shop_address String
}

// models for TESTING puropses
model User {
  user_id Int     @id @default(autoincrement())
  email   String  @unique
  name    String?
  posts   Post[]
}

model Post {
  post_id   Int     @id @default(autoincrement())
  title     String  @unique
  content   String?
  published Boolean @default(false)
  authorId  Int
  author    User    @relation(fields: [authorId], references: [user_id])
}
