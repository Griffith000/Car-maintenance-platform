// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../templates/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// creating models for the car
// the models are to be inputted one by one and then linked
// 1/ The models are being created (Somewhat done)
// 2/ the models will be linked with each other (What i am currently doing)
// 3/ test the relationship between these tables

// Chb3a erreurat

enum RegTypes {
  TUN 
  RS
  TRAC
  PAT 
  CMD
  CD
  MD
  MC
  CC
  REM
  AA 
  ES
  PE
  IT
}

enum RepairStatus {
  DIAGNOSTIC
  REPAIR
  SUCCESS
  FAILURE
}

model vehicule {
  vin                   String          @id
  local                 Boolean //for local in-house vehicules and the not local (imported) vehicules 
  registation           String // to maybe set automatically when the registration type is selected

  // define in-house vehicules (nullable)
  registration_type     RegTypes? // null if local is false

  // define imported vehicules (nullable also) 
  location              String?
}

// currently the phone number supports only the phones in tunisian format only (may support global phone numbers later)

model Reservation {
  reservation_id        Int             @id @default(autoincrement())
  mobile_phone          String          @db.VarChar(8)
  date                  Date    
  base_fee              Double? // if there is a fee or not
  repair_status         RepairStatus?  // to both get information about the repair and it's type
  vehicule_id           String 
  vehicule              Vehicule        @relation(fields: [vin], refrences: [vehicule_id])

  // to test later
  @@db.check("mobile_phone ~ '^(2|5|9)[0-9]{7}$'")
}

model Diagnostic {
  diagnostic_id         Int             @id @default(autoincrement())
  responsible_id        Int
  responsible           Mechanic        @relation(fields: [mechanic_id], refrences: [responsible_id])
  workers_employed      Mechanic[]

  reservation_id        String
  reservation           Reservation     @relation(fields: [reservation_id], refrences: [reservation_id]) // are names supposed to be the same?
}

model Repair {
  repair_id             Int             @id @default(autoincrement())
  responsible_id        Int
  responsible           Mechanic        @relation(fields: [mechanic_id], refrences: [responsible_id])
  workers_employed      Mechanic[]

  reservation_id        String
  reservation           String          @relation(fields: [reservation_id], refrences: [reservation_id])
  total_repair_hours    Int
}

model RepairPart {
  part_id               String          @id
  price                 Double
  repair_id             Int[]
  vendor_id             Int[]
}

// the price is maybe problematic
model Mechanic {
  mechanic_id           Int             @id
  pay_per_hour          Double
}

model Vendor {
  vendor_id             Int             @id
  vendor_shop_name      String
  vendor_shop_address   String
}



// models for TESTING puropses
model User {
  id                    Int             @id @default(autoincrement())
  email                 String          @unique
  name                  String?
  posts                 Post[]
}

model Post {
  id                    Int             @id @default(autoincrement())
  title                 String          @unique
  content               String?
  published             Boolean         @default(false)
  authorId              Int
  author                User            @relation(fields: [authorId], references: [id])
}

